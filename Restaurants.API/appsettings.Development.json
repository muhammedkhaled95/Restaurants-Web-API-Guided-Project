{
  "ConnectionStrings": {
    "RestaurantsDBConnectionString": "Server = DESKTOP-LUROVE5; Database = Restaurants; Integrated Security = True; Connect Timeout = 30; Encrypt = False; TrustServerCertificate = False; ApplicationIntent = ReadWrite; MultiSubnetFailover = False"
  },
  "Serilog": {
    "MinimumLevel": {
      "Override": {
        "Microsoft": "Warning",
        "Microsoft.EntityFrameworkCore": "Information"
      }
    },
    "WriteTo": [
      {
        "Name": "Console",
        "Args": {
          "outputTemplate": "[{Timestamp: dd-MM HH:mm:ss} {Level:u3}] |{SourceContext}|{NewLine}{Message:lj}{NewLine}{Exception}"
        }
      },
      {
        "Name": "File",
        "Args": {
          "path": "Logs/Restaurant-API-.log",
          "rollingInterval": "Day",
          "rollOnFileSizeLimit": true,
          "Formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact"
        }
      }
    ]
  }
}


/*
   // 2. Override default logging levels for specific namespaces.
    //    - "Microsoft" logs will only be logged if they are Warning level or above.
    //    - "Microsoft.EntityFrameworkCore" logs will be at the Information level or above.
    //    - This helps reduce noise in logs by ignoring lower-level logs from the framework.
    configuration
        .MinimumLevel.Override("Microsoft", LogEventLevel.Warning)
        .MinimumLevel.Override("Microsoft.EntityFrameworkCore", LogEventLevel.Information)

        // 3. Write logs to the Console sink.
        //    - You can add additional sinks here, e.g. .WriteTo.File(...) or .WriteTo.Seq(...).
        .WriteTo.Console(outputTemplate: "[{Timestamp: dd-MM HH:mm:ss} {Level:u3}] |{SourceContext}|{NewLine}{Message:lj}{NewLine}{Exception}")
        /// <summary>
        /// Configures Serilog to write logs to a file with daily rolling intervals.
        /// </summary>
        /// <param name="path">The file path for the log file.</param>
        /// <param name="rollingInterval">Specifies that logs should roll over daily.</param>
        /// <param name="rollOnFileSizeLimit">Enables log file rollover when the size limit is reached.</param>
        /// <param name="Formatter">Configure the file sink to use the compact JSON formatter.
        /// The "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact" formatter
        /// produces compact JSON-formatted log output, which is ideal for structured logging and
        /// integration with log analysis tools.
        .WriteTo.File("Logs/Restaurant-API-.log", rollingInterval: RollingInterval.Day, rollOnFileSizeLimit: true,
                      "Formatter": "Serilog.Formatting.Compact.CompactJsonFormatter, Serilog.Formatting.Compact");
*/
